var Buf = LogStream.buf;
UTest({
	
	'single': function(done){
		var log_ROOT = Logger('root', 55);
		
		
		eq_(log_ROOT._name, 'root');

		log_ROOT('baz');
		eq_(Buf.length, 0);
		
		Logger.cfg('level', 55);
		log_ROOT('baz');
		eq_(Buf.shift(), 'root baz');
		
		Logger.cfg('level', 20);
		log_ROOT('baz');
		eq_(Buf.length, 0);
		
		
		Logger.cfg({
			levels: {
				'root': 20
			}
		});
		log_ROOT('qux');
		eq_(Buf.shift(), 'root qux');
		
		done(log_ROOT);
	},
	'1 child': function(next, log_ROOT){
		
		'> strict scope'
		var log_A = log_ROOT.create('a');
		eq_(log_A._name, 'root.a');
		log_A('qux');
		eq_(Buf.length, 0);
		
		'> inherited scope'
		Logger.cfg({
			levels: {
				'root.*': 20
			}
		});
		log_A('qux');
		eq_(Buf.shift(), 'root.a qux');
		
		'> log level too big'
		Logger.cfg({
			levels: {
				'root.*': 60
			}
		});
		log_ROOT('qux');
		log_A('qux');
		eq_(Buf.length, 0);
		
		Logger.cfg({
			levels: {
				'root.a': 20
			}
		});
		log_ROOT('qux');
		log_A('qux');
		eq_(Buf.length, 1);
		eq_(Buf.shift(), 'root.a qux');
		
		next(log_ROOT, log_A);
	},
	'2 children': function(next, log_ROOT, log_A){
		var log_B = log_ROOT.create('b');
		Logger.cfg({
			level: 50,
			levels: {
				'root.*': 60,
				'root.b': 50
			}
		});
		
		log_A('aaa');
		log_B('bbb');
		eq_(Buf.shift(), 'root.b bbb');
		
		
		
		next(log_ROOT);
	},
	
	'levels': function(){
		Logger.cfg({
			color: 'none',
			level: 25,
			levels: {
				'foo': 50
			}
		});
		var log = Logger.create('foo');
		log.error('err');
		
		
		Logger.cfg('color', 'ascii');
		eq_(Buf.shift(), 'foo err');
	}
	
})