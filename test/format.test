UTest({
	'string': function(){
		Logger.cfg({
			color: 'none',
			logCaller: false
		});
		
		Logger.log('Foo', 'Bar', 'Baz')
		Logger.log('Foo `%s`', 'baz');
		Logger.log('Str:%s; Num:%s; Date:%s', 'baz', 23.5, new Date(2014,0, 1).getFullYear());
		
		Logger.cfg('color', 'ascii');
		eq_(LogStream.buf.shift(), 'Foo Bar Baz');
		eq_(LogStream.buf.shift(), 'Foo `baz`');
		eq_(LogStream.buf.shift(), 'Str:baz; Num:23.5; Date:2014');
	},
	
	'json': function () {
		Logger.cfg('color', 'html');
		var str,
			A = {
				letter: 'A',
				small: [ 'a', 'b', 'c', 5, {time: new Date}],
				search: /a/g,
				doSmth: function(){}
			};
		
		Logger.log(A);
		str = LogStream.buf.pop();
		
		
		Logger.cfg('color', 'ascii');
		has_(str, '<span style="color:yellow">A</span>')
		has_(str, ': [');
		has_(str, /\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z/, 'has time');
		has_(str, '<function>');
	},
	'should support circular json': function(){
		Logger.cfg('color', 'none');
		var str,
			A = {};
		
		A.b = A;
		A.c = [A, A.b];
		Logger.log(A);
		str = LogStream.buf.pop();
		
		Logger.cfg('color', 'ascii');
		has_(str, 'b: <circular>');
		has_(str, 'c: [\n    <circular>,\n    <circular>\n  ]');
	}
});
