var logsDir = new io.Directory('test/transports/mylog/'),
	Logger,
	file, files;

function initLogger(cfg) {
	Logger = require('../../lib/logger-dev.js');
	Logger.cfg(cfg || {
		color: 'none',
		logCaller: false,
		logDate: 'yyyy_',
		transport: {
			type: 'fs',
			directory: 'mylog',
			bufferSize: 0,
			fileSize: 100,
			filesCount: 4,
			sync: true
		}
	});
    
    return Logger;
}

UTest({
	$before: function(){
		logsDir.remove();
	},
	$after: function(done){
		logger.cfg('color', 'ascii');
		setTimeout(function(){
			logsDir.remove();
			done();
		}, 10);
	},
	$config: {
		timeout: 5000
	},
	'write': function(){
		initLogger();
		
		Logger.log('Foo');
		eq_(logsDir.exists(), true);
		
		var files = getFiles(),
            file = files[0];
		
		eq_(files.length, 1);
		has_(file.read(), /^2014_ Foo$/gm);
		file.content = null;
		
		Logger.log('Baz');
		has_(file.read(), /^2014_ Foo$/gm);
		has_(file.read(), /^2014_ Baz$/gm);
	},
	
	'restart': function(){
		initLogger();
		Logger.log('Qux');
		
		var files = getFiles(),
            file = files[0]
            ;
		
		eq_(files.length, 1);
		has_(file.read(), /^2014_ Foo$/gm);
		has_(file.read(), /^2014_ Baz$/gm);
		has_(file.read(), /^2014_ Qux$/gm);
	},
	
	'exception': function(done){
        initLogger();
        Logger.log('create file');
        setTimeout(function(){
            // remove file
            logsDir.remove();
            setTimeout(function(){
                // exception - no file to write
                Logger.log('X!');
                
                file = new io.File(logsDir.uri.combine('logger-exceptions.txt'));
                eq_(file.exists(), true);
                eq_(getFiles().length, 1);
                done();
            });
        });
	},
	
	
	'fill files': (function () {
		var config = {
			color: 'none',
			logCaller: false,
			logDate: false,
			transport: {
				type: 'fs',
				directory: 'mylog',
				bufferSize: 0,
				fileSize: 100,
				filesCount: 5,
				sync: true
			}
		};
		function u_fillFile(id){
			Logger.cfg('color', 'none');
			var i = 10;
			while( --i > -1){
				logLine(id + '', 10);
			}
			
			Logger.cfg('color', 'ascii');
		}
		function u_ensureFileCount(files, expectFiles) {
			eq_(files.length, expectFiles);
		}
		function u_ensureLastSize(files){
			var length = files.length;
			eq_(getFileSize(files[length - 1]), 100);
		}
		function u_ensureNum(files, num){
			var str = files[files.length - 1].read();
			has_(str, new RegExp('^' + num));
		}
		function u_fillFileAndCheck(num, expect, done) {
			u_fillFile(num);
			setTimeout(function(){
				var files = getFiles();
				u_ensureFileCount(files, expect);
				u_ensureLastSize(files);
				u_ensureNum(files, num);
				done();
			}, 200);
		}
		return {
			$before: function(done){
				teardownLogger(config, done);
			},
			'should fill file #1': function(done){
				u_fillFileAndCheck(1, 1, done);
			},
			'should fill file #2': function(done){
				u_fillFileAndCheck(2, 2, done);
			},
			'should fill file #3': function(done){
				u_fillFileAndCheck(3, 3, done);
			},
			'should fill file #4': function(done){
				u_fillFileAndCheck(4, 4, done);
			},
			'should fill file #5': function(done){
				u_fillFileAndCheck(5, 5, done);
			},
			'should remove last file for next logging': function(){
				initLogger(config);
			},
			'should fill file #6': function(done){
				u_fillFileAndCheck(6, 5, done);
			},
			'should fill file #7': function(done){
				initLogger(config);
				u_fillFileAndCheck(7, 5, done);
			},
			'should fill file #8': function(done){
				initLogger(config);
				u_fillFileAndCheck(8, 5, done);
			},
			'should contains data from #4 - #8': function(){
				files = getFiles();
				eq_(files.length, 5);
				has_(files[0].read(), /^(4\s+\n){10}$/g);
				has_(files[1].read(), /^(5\s+\n){10}$/g);
				has_(files[2].read(), /^(6\s+\n){10}$/g);
				has_(files[3].read(), /^(7\s+\n){10}$/g);
				has_(files[4].read(), /^(8\s+\n){10}$/g);
			},
		}
	}()),
	
	
	'html': function(done){
		setTimeout(function(){
            initLogger({
                color: 'html',
                logCaller: true,
                logDate: 'yyyy_',
                transport: {
                    type: 'fs',
                    extension: 'html',
                    directory: 'mylog',
                    bufferSize: 0,
                    fileSize: 100,
                    filesCount: 5,
                    sync: true
                }
            });
            
            Logger.log('Foo'.green);
            Logger.log('Baz'.cyan.bold);
            logger.cfg('color', 'ascii');
			
            var files = getFiles('html');
            
            eq_(files.length, 1);
            
            var html = files[0].read();
            
            has_(html, 'color:green');
            has_(html, 'color:cyan');
            has_(html, '<br/>');
            done();
        })
	},
	
	'intercept std': function(done){
		setTimeout(function(){
			logsDir.remove();
			initLogger({
				logCaller: true,
				logDate: 'yyyy_',
				transport: {
					type: 'fs',
					directory: 'mylog',
					bufferSize: 0,
					sync: true,
					interceptStd: true
				}
			});
			console.log('Interceptor');
			Logger.getTransport().interceptStd(false);
			
			
			var files = getFiles(),
                file = files[0];
			
			eq_(files.length, 1);
			has_(file.read(), /^Interceptor$/gm);
            done();
		})
	},
    
    'async': function(done){
        setTimeout(function(){
			logsDir.remove();
			initLogger({
				color: 'none',
				logCaller: true,
				logDate: 'yyyy_',
				transport: {
					type: 'fs',
					directory: 'mylog',
					bufferSize: 0,
                    sync: false
				}
			});
			
            Logger.log('one');
            Logger.log('two');
            
            setTimeout(function(){
                Logger.log('three');
                
                setTimeout(function(){
                            
                    var files = getFiles(),
                        file = files[0]
                        ;
                    
                    eq_(files.length, 1);
                    has_(file.read(), /(one)(.|\s)+(two)(.|\s)+three/);
                    done();
                    
                }, 400);
            },100);
            
		})
    },
	'async buffer': {
		$before: function(done){
			teardownLogger({
				color: 'none',
				logCaller: false,
				logDate: false,
				transport: {
					type: 'fs',
					directory: 'mylog',
					fileSize: 500 * 1024,
					filesCount: 4,
					bufferSize: 5,
					sync: false
				}
			}, done);
		},
		'should write to buffer': function(done){
			
			logLine('a1', 10);
			logLine('a2', 10);
			logLine('a3', 10);
			logLine('a4', 10);
			logLine('a5', 10);
			
			setTimeout(function(){
				eq_(getFiles().length, 0);
				done();
			}, 300)
		},
		'should write buffer to file': function(done){
			logLine('a6', 10);
			
			setTimeout(function(){
				files = getFiles();
				eq_(files.length, 1);
				
				file = files[0];
				eq_(getFileSize(file), 60);
				
				var str = file.read();
				has_(str, /^a1\s+$/gm);
				has_(str, /^a5\s+$/gm);
				has_(str, /^a6\s+$/gm);
				done();
			}, 300)
		}
	},
	
	'async fill': {
		
		$before: function(done){
			teardownLogger({
				color: 'none',
				logCaller: false,
				transport: {
					type: 'fs',
					directory: 'mylog',
					fileSize: 102400,
					filesCount: 4,
					bufferSize: 5,
					sync: false
				}
			}, done);
		},
		'should fill file': function(next){
			
			var i = -1;
			while (++i < 10240) {
				logLine(String(i), 10);
			}
			
			setTimeout(function(){
				files = getFiles();
				eq_(files.length, 1);
				eq_(getFileSize(files[0]), 102400);
				
				var str = files[0].read();
				has_(str, /^1 /gm);
				has_(str, /^10239 /gm);
				
				next();
			}, 500);
		},
		'should write to next file': function (done) {
			Logger
				.log('1')
				.log('2')
				.log('3')
				.log('4')
				.log('5')
				.log('6')
			
			setTimeout(function(){
				files = getFiles();
				eq_(files.length, 2);
				has_(files[1].read(), /^1\s+2\s+3\s+4\s+5\s+6\s+$/g);
				done();
			}, 500);
		}
		
	}
});

function getFiles(ext) {
    return logsDir
        .readFiles('*.' + (ext || 'txt'))
        .files
        .sort(function(a, b){
            if (a.uri.file < b.uri.file) 
                return -1;
            
            if (a.uri.file > b.uri.file) 
                return 1;
            
            return 0;
        })
        ;
}


var eol = require('os').EOL;

function getFileSize(file) {
	return require('fs').lstatSync(file.uri.toLocalFile()).size;
}
function logLine(str, chars){
	var count = chars - eol.length;
	while (str.length < count) str += ' ';
	Logger.log(str);
}
function color(state){
	Logger.cfg('color', state ? state: 'none');
}
function teardownLogger(cfg, done) {
	setTimeout(() => {
		logsDir
		.removeAsync()
		.always(() => {

			setTimeout(() => {
				initLogger(cfg);
				setTimeout(done, 50);
			}, 50)
			
		})
	}, 50)
}
	