var logsDir = new io.Directory('test/transports/mylog/'),
	Logger;

function initLogger(cfg) {
	Logger = require('../../lib/logger.js').logger
	Logger.cfg(cfg || {
		color: 'none',
		logCaller: false,
		logDate: 'yyyy_',
		transport: {
			type: 'fs',
			directory: 'mylog',
			bufferSize: 0,
			fileSize: 100,
			filesCount: 5,
			sync: true
		}
	});
    
    
    
	return Logger;
}

UTest({
	$before: function(){
		logsDir.remove();
	},
	$after: function(done){
		setTimeout(function(){
			logsDir.remove();
			done();
		}, 10);
	},
	'write': function(){
		initLogger();
		
		Logger.log('Foo');
		eq_(logsDir.exists(), true);
		
		var files = logsDir
			.readFiles('*.txt')
			.files;
		
		var file = files[0];
		
		eq_(files.length, 1);
		has_(file.read(), /^2014_ Foo$/gm);
		file.content = null;
		
		Logger.log('Baz');
		has_(file.read(), /^2014_ Foo$/gm);
		has_(file.read(), /^2014_ Baz$/gm);
	},
	
	'restart': function(){
		initLogger();
		Logger.log('Qux');
		
		var files = logsDir
			.readFiles('*.txt')
			.files;
		
		var file = files[0];
		
		eq_(files.length, 1);
		has_(file.read(), /^2014_ Foo$/gm);
		has_(file.read(), /^2014_ Baz$/gm);
		has_(file.read(), /^2014_ Qux$/gm);
	},
	
	'exception': function(){
		logsDir.remove();
		
		Logger.log('X!');
		
		file = new io.File(logsDir.uri.combine('logger-exceptions.txt'));
		eq_(file.exists(), true);
		eq_(logsDir.readFiles('*.txt').files.length, 1);
	},
	
	
	'fill files': function(done){
        setTimeout(function(){
            logsDir.remove();
            
            initLogger();
            
            fillToNext(1);
            fillToNext(2);
            fillToNext(3);
            fillToNext(4);
            fillToNext(5);
            fillToNext(6);
            
            initLogger();
            fillToNext(6, 7);
            
            initLogger();
            fillToNext(6, 8);
            
            done();
        })
		
	},
	
	'html': function(done){
		setTimeout(function(){
            initLogger({
                color: 'html',
                logCaller: true,
                logDate: 'yyyy_',
                transport: {
                    type: 'fs',
                    extension: 'html',
                    directory: 'mylog',
                    bufferSize: 0,
                    fileSize: 100,
                    filesCount: 5,
                    sync: true
                }
            });
            
            Logger.log('Foo'.green);
            Logger.log('Baz'.cyan.bold);
            
            var files = logsDir
                .readFiles('*.html')
                .files;
            
            eq_(files.length, 1);
            
            var html = files[0].read();
            
            has_(html, 'color:green');
            has_(html, 'color:cyan');
            has_(html, '<br/>');
            
            done();
        })
	},
	
	'intercept std': function(done){
		setTimeout(function(){
			logsDir.remove();
			initLogger({
				color: 'none',
				logCaller: true,
				logDate: 'yyyy_',
				transport: {
					type: 'fs',
					directory: 'mylog',
					bufferSize: 0,
					sync: true,
					interceptStdOut: true
				}
			});
			console.log('Interceptor');
			Logger.getTransport().interceptStdOut(false);
			
			
			var files = logsDir
				.readFiles('*.txt')
				.files;
			
			var file = files[0];
			
			eq_(files.length, 1);
			has_(file.read(), /^Interceptor$/gm);
            done();
		})
	},
    
    'async': function(done){
        setTimeout(function(){
			logsDir.remove();
			initLogger({
				color: 'none',
				logCaller: true,
				logDate: 'yyyy_',
				transport: {
					type: 'fs',
					directory: 'mylog',
					bufferSize: 0,
                    sync: false
				}
			});
			
            Logger.log('one');
            Logger.log('two');
            
            setTimeout(function(){
                Logger.log('three');
                
                setTimeout(function(){
                            
                    var files = logsDir
                        .readFiles('*.txt')
                        .files;
                    
                    var file = files[0];
                    
                    eq_(files.length, 1);
                    has_(file.read(), /(one)(.|\s)+(two)(.|\s)+three/);
                    done();
                    
                }, 400);
            },100);
            
		})
    }
})

function fillToNext(expectCount, id) {
	var i = 10;
	while( --i > -1){
		Logger.log('Lore' + (id || expectCount));
	}
	
    eq_(logsDir.exists(), true);
    
    var files = logsDir
        .readFiles('*.txt')
        .files
        ;
	
	eq_(files.length, expectCount);
}